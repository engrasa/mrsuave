install.packages("rLiDAR")
install.packages("rLiDAR")
require(rLiDAR)
require(rLiDAR)
data(chm)
plot(chm)
data(chm)
plot(chm)
library(rLiDAR)
plot(chm)
install.packages("rLiDAR")
install.packages("rLiDAR")
require(rLiDAR)
library(rLiDAR)
data(chm)
plot(chm)
#===============================================================#
# Example 01: Smoothing the CHM using a Gaussian filter
#==================================================================#
# Set the ws:
ws<-3 # dimension 3x3
# Set the filter type
filter<-"Gaussian"
# Set the sigma value
sigma<-0.6
# Smoothing CHM
sCHM<-CHMsmoothing(chm, filter, ws, sigma)
plot(sCHM)
#===============================================================#
# Example 02: Smoothing the CHM using a mean filter
#===================================================================#
# Set the ws:
ws<-5 # dimension 5x5
# Set the filter type
filter<-"mean"
# Smoothing and plotting lidar-derived CHM
sCHM<-CHMsmoothing(chm, filter, ws)
plot(sCHM)
# Importing LAS file:
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Reading LAS file
LAS<-readLAS(LASfile,short=TRUE)
# Importing LAS file:
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Reading LAS file
LAS<-readLAS(LASfile,short=TRUE)
# Importing LAS file:
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Reading LAS file
LAS<-readLAS(LASfile,short=TRUE)
LAS
plot(LAS)
xyz<-subset(LAS[,1:3],LAS[,3] >= 1.37)
xyz
set.seed(1)
clLAS<-kmeans(xyz, 60)
clLAS
plot(clLAS)
# Set the points id
id<-as.factor(clLAS$cluster)
id
# Set the xyid input
xyid<-cbind(xyz[,1:2],id)
xyid
# Compute the lidar convex hull of the clusters chullTrees<-chullLiDAR2D(xyid)
# Compute the lidar convex hull of the clusters
chullTrees<-chullLiDAR2D(xyid)
# Plotting the lidar convex hull library(sp) plot(SpatialPoints(xyid[,1:2]),cex=0.5,col=xyid[,3], axes=T) plot(chullTrees$chullPolygon,add=TRUE, border=”green”)
library(sp)
plot(SpatialPoints(xyid[,1:2]),cex=0.5,col=xyid[,3], axes=T)
plot(chullTrees$chullPolygon,add=TRUE, border=”green”)
plot(chullTrees$chullPolygon, add=TRUE, border=green)
plot(chullTrees$chullPolygon, add=TRUE, border="green")
chullList<-chullTrees$chullArea
summary(chullList) # summary
# Importing LAS file:
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Reading LAS file
LAS<-readLAS(LASfile,short=TRUE)
# Setting the xyz coordinates and subsetting the data
xyz<-subset(LAS[,1:3],LAS[,3] >= 1.37)
# Finding clusters
clLAS<-kmeans(xyz, 32)
id<-as.factor(clLAS$cluster)
#===========================================================#
# Example 01
#===============================================================#
# Set the alpha
alpha<-0.6
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col="forestgreen"
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
install.packages(rgl)
require(rgl)
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha)
summary(volumeList) # summary
plot3d(xyzid[,1:3], add=TRUE)
axes3d(c("x-", "y-", "z-+"))
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#===========================================================#
# Example 01
#===============================================================#
# Set the alpha
alpha<-0.6
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col="forestgreen"
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
install.packages(rgl)
require(rgl)
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha)
summary(volumeList) # summary
plot3d(xyzid[,1:3], add=TRUE)
axes3d(c("x-", "y-", "z-+"))
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#===========================================================#
# Example 02
#==============================================================#
# Set the alpha
alpha<-0.85
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col=levels(factor(id))
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha) summary(volumeList)
# Add other plot parameters
plot3d(xyzid[,1:3], col=xyzid[,4], add=TRUE)
# add the 3D point cloud
axes3d(c("x+", "y-", "z-"))
# axes
grid3d(side=c("x+", "y-", "z"), col="gray") # grid
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#===========================================================#
# Example 02
#==============================================================#
# Set the alpha
alpha<-0.85
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col=levels(factor(id))
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha) summary(volumeList)
# Add other plot parameters
plot3d(xyzid[,1:3], col=xyzid[,4], add=TRUE)
# add the 3D point cloud
axes3d(c("x+", "y-", "z-"))
# axes
grid3d(side=c("x+", "y-", "z"), col="gray") # grid
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#===========================================================#
# Example 01
#===============================================================#
# Set the alpha
alpha<-0.6
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col="forestgreen"
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
install.packages(rgl)
require(rgl)
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha)
summary(volumeList) # summary
plot3d(xyzid[,1:3], add=TRUE)
axes3d(c("x-", "y-", "z-+"))
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#===========================================================#
# Example 02
#==============================================================#
# Set the alpha
alpha<-0.85
# Set the plotCAS parameter
plotit=TRUE
# Set the convex hull color
col=levels(factor(id))
# Combining xyz and id
xyzid<-cbind(xyz,id)
# Get the volume and surface area
open3d()
volumeList<-chullLiDAR3D(xyzid=xyzid, plotit=plotit, col=col,alpha=alpha) summary(volumeList)
# Add other plot parameters
plot3d(xyzid[,1:3], col=xyzid[,4], add=TRUE)
# add the 3D point cloud
axes3d(c("x+", "y-", "z-"))
# axes
grid3d(side=c("x+", "y-", "z"), col="gray") # grid
title3d(xlab = "UTM Easthing", ylab = "UTM Northing",zlab = "Height", col="red")
aspect3d(1,1,0.7) # scale
#==============================================================#
# Individual tree detection using K-means cluster
#================================================================#
# Importing LAS file:
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Reading LAS file
LAS<-readLAS(LASfile,short=TRUE)
# Setting the xyz coordinates and subsetting the data
xyzi<-subset(LAS[,1:4],LAS[,3] >= 1.37)
# Finding clusters (trees)
clLAS<-kmeans(xyzi[,1:2], 32)
# Set the tree id vector
Id<-as.factor(clLAS$cluster)
# Combining xyzi and tree id
xyziId<-cbind(xyzi,Id)
#=============================================================#
# Computing individual tree lidar metrics
#================================================================#
TreesMetrics<-CrownMetrics(xyziId) head(TreesMetrics)
#=============================================================#
# Computing individual tree lidar metrics
#================================================================#
TreesMetrics<-CrownMetrics(xyziId)
head(TreesMetrics)
plot(TreesMetrics)
# Importing the lidar-derived CHM raster file
data(chm) # or set a CHM. e.g. chm<-raster("CHM_stand.asc")
# Smoothing CHM
schm<-CHMsmoothing(chm, "mean", 5)
plot(schm)
# Setting the fws:
fws<-5 # dimention 5x5
# Setting the fws:
fws<-5 # dimention 5x5
# Setting the specified height above ground for detectionbreak
minht<-8.0
# Getting the individual tree detection list
treeList<-FindTreesCHM(schm, fws, minht)
summary(treeList)
# Plotting the individual tree location on the CHM library(raster)
plot(chm, main="lidar-derived CHM")
library(sp)
XY<-SpatialPoints(treeList[,1:2]) # Spatial points
plot(XY, add=TRUE, col="black", pch=16,cex=2) # plotthing tree location
## Not run:
# Import the lidar-derived CHM file
data(chm) # or set a CHM. e.g. chm<-raster("CHM_stand.asc")
# Set the loc parameter
sCHM<-CHMsmoothing(chm, filter="mean", ws=5) # smoothing CHM
loc<-FindTreesCHM(sCHM, fws=5, minht=8) # or import a tree list
loc
# Set the maxcrown parameter
maxcrown=10.0
# Set the exclusion parameter
exclusion=0.3 # 30%
# Compute individual tree detection canopy area
canopy<-ForestCAS(chm, loc, maxcrown, exclusion)
# Set the maxcrown parameter
maxcrown=10.0
# Set the exclusion parameter
exclusion=0.3 # 30%
# Compute individual tree detection canopy area
canopy<-ForestCAS(chm, loc, maxcrown, exclusion)
canopy
#===========================================================#
# Retrieving the boundary for individual tree detection and canopy area calculation
#==============================================================#
boundaryTrees<-canopy[[1]]
# Plotting the individual tree canopy boundary over the CHM
plot(chm, main="lidar-derived CHM")
plot(boundaryTrees, add=T, border="black", lwd=2,bg="transparent") # adding tree canopy boundary
## Not run:
# Import the lidar-derived CHM file
data(chm) # or set a CHM. e.g. chm<-raster("CHM_stand.asc")
# Set the loc parameter
sCHM<-CHMsmoothing(chm, filter="mean", ws=5) # smoothing CHM
loc<-FindTreesCHM(sCHM, fws=5, minht=8) # or import a tree list
# Set the maxcrown parameter
maxcrown=10.0
# Set the exclusion parameter
exclusion=0.3 # 30%
# Compute individual tree detection canopy area
canopy<-ForestCAS(chm, loc, maxcrown, exclusion)
#===========================================================#
# Retrieving the boundary for individual tree detection and canopy area calculation
#==============================================================#
boundaryTrees<-canopy[[1]]
# Plotting the individual tree canopy boundary over the CHM
plot(chm, main="lidar-derived CHM")
plot(boundaryTrees, add=T, border="black", lwd=2,bg="transparent") # adding tree canopy boundary
install.packages("rgeos")
library(rgeos)
## Not run:
# Import the lidar-derived CHM file
data(chm) # or set a CHM. e.g. chm<-raster("CHM_stand.asc")
# Set the loc parameter
sCHM<-CHMsmoothing(chm, filter="mean", ws=5) # smoothing CHM
loc<-FindTreesCHM(sCHM, fws=5, minht=8) # or import a tree list
# Set the maxcrown parameter
maxcrown=10.0
# Set the exclusion parameter
exclusion=0.3 # 30%
# Compute individual tree detection canopy area
canopy<-ForestCAS(chm, loc, maxcrown, exclusion)
#===========================================================#
# Retrieving the boundary for individual tree detection and canopy area calculation
#==============================================================#
boundaryTrees<-canopy[[1]]
# Plotting the individual tree canopy boundary over the CHM
plot(chm, main="lidar-derived CHM")
plot(boundaryTrees, add=T, border="black", lwd=2,bg="transparent") # adding tree canopy boundary
#===========================================================#
# Retrieving the list of individual trees detected for canopy area calculation
#==============================================================#
canopyList<-canopy[[2]] # list of ground-projected areas of individual tree canopies
summary(canopyList) # summary
# Spatial location of the trees library(sp)
XY<-SpatialPoints(canopyList[,1:2]) # Spatial points
plot(XY, col="red", add=T, pch=16, cex=2) # adding tree location to the plot
## End(Not run)
#===============================================================#
# Example 01: Computing lidar metrics for a single LAS file
#==================================================================#
# Import the LAS data file
LASfile <- system.file("extdata", "LASexample1.las", package="rLiDAR")
# Set the minht and above parameters
minht<-1.37 # meters or feet
above<-2.00 # meters or feet
# lidar metrics computation
LiDARmetrics<-LASmetrics(LASfile, minht, above)
LiDARmetrics
#===============================================================
# Example 02: Computing Lidar metrics for multiple LAS files within a folder
#==================================================================#
# Set folder where LAS source files reside
folder=dirname(LASfile)
# Get list of LAS files residing in the folder
LASlist <- list.files(folder, pattern="*.las", full.names=TRUE)
# Set the "minht" and "above" parameters
minht<-1.37 # meters or feet
above<-2.00 # meters or feet
# Creat an empty dataframe in whic to store the lidar metrics
getMetrics<-data.frame()
# Set a loop to compute the lidar metrics
for ( i in LASlist) {
getMetrics<-rbind(getMetrics, LASmetrics(i, minht, above))
}
# Table of the Lidar metrics
LiDARmetrics<-cbind(Files=c(basename(LASlist)), getMetrics) head(LiDARmetrics)
# Creat an empty dataframe in whic to store the lidar metrics
getMetrics<-data.frame()
# Set a loop to compute the lidar metrics
for ( i in LASlist) {
getMetrics<-rbind(getMetrics, LASmetrics(i, minht, above))
}
# Table of the Lidar metrics
LiDARmetrics<-cbind(Files=c(basename(LASlist)), getMetrics)
head(LiDARmetrics)
install.packages("ForestTools")
# Table of the Lidar metrics
LiDARmetrics<-cbind(Files=c(basename(LASlist)), getMetrics)
head(LiDARmetrics)
